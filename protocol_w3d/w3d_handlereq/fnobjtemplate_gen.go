// Code generated by "genprotocol -ver=f5b1d289172cf84ad5d01b91533408be6b17961cf28ddd6fe767224298a8aedd -basedir=. -prefix=w3d -statstype=int"

package w3d_handlereq

/* obj base demux fn map template
	var DemuxReq2ObjAPIFnMap = [...]func(
		me interface{}, hd w3d_packet.Header, robj interface{}) (
		w3d_packet.Header, interface{}, error){
	w3d_idcmd.Invalid: Req2ObjAPI_Invalid,
w3d_idcmd.MakeTeam: Req2ObjAPI_MakeTeam,
w3d_idcmd.Act: Req2ObjAPI_Act,
w3d_idcmd.Heartbeat: Req2ObjAPI_Heartbeat,

}   // DemuxReq2ObjAPIFnMap

	func Req2ObjAPI_Invalid(
		me interface{}, hd w3d_packet.Header, robj interface{}) (
		w3d_packet.Header, interface{},  error) {
		req, ok := robj.(*w3d_obj.ReqInvalid_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqInvalid(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqInvalid(
		me interface{}, hd w3d_packet.Header, robj *w3d_obj.ReqInvalid_data) (
		w3d_packet.Header, *w3d_obj.RspInvalid_data, error) {
		sendHeader := w3d_packet.Header{
			ErrorCode : w3d_error.None,
		}
		sendBody := &w3d_obj.RspInvalid_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_MakeTeam(
		me interface{}, hd w3d_packet.Header, robj interface{}) (
		w3d_packet.Header, interface{},  error) {
		req, ok := robj.(*w3d_obj.ReqMakeTeam_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqMakeTeam(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqMakeTeam(
		me interface{}, hd w3d_packet.Header, robj *w3d_obj.ReqMakeTeam_data) (
		w3d_packet.Header, *w3d_obj.RspMakeTeam_data, error) {
		sendHeader := w3d_packet.Header{
			ErrorCode : w3d_error.None,
		}
		sendBody := &w3d_obj.RspMakeTeam_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_Act(
		me interface{}, hd w3d_packet.Header, robj interface{}) (
		w3d_packet.Header, interface{},  error) {
		req, ok := robj.(*w3d_obj.ReqAct_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqAct(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqAct(
		me interface{}, hd w3d_packet.Header, robj *w3d_obj.ReqAct_data) (
		w3d_packet.Header, *w3d_obj.RspAct_data, error) {
		sendHeader := w3d_packet.Header{
			ErrorCode : w3d_error.None,
		}
		sendBody := &w3d_obj.RspAct_data{
		}
		return sendHeader, sendBody, nil
	}

	func Req2ObjAPI_Heartbeat(
		me interface{}, hd w3d_packet.Header, robj interface{}) (
		w3d_packet.Header, interface{},  error) {
		req, ok := robj.(*w3d_obj.ReqHeartbeat_data)
		if !ok {
			return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
		}
		rhd, rsp, err := objAPIFn_ReqHeartbeat(me, hd, req)
		return rhd, rsp, err
	}
	func objAPIFn_ReqHeartbeat(
		me interface{}, hd w3d_packet.Header, robj *w3d_obj.ReqHeartbeat_data) (
		w3d_packet.Header, *w3d_obj.RspHeartbeat_data, error) {
		sendHeader := w3d_packet.Header{
			ErrorCode : w3d_error.None,
		}
		sendBody := &w3d_obj.RspHeartbeat_data{
		}
		return sendHeader, sendBody, nil
	}

*/
